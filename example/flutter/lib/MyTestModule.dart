// Generated by flutter-kmp. Do not modify.

import 'dart:async';
import 'dart:convert';
import 'package:iso_duration/iso_duration.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'models.dart';
               
class MyTestModule {
  final methodChannelToNative = const MethodChannel("MyTestModule");
  
  final Stream<int> intEvents = const EventChannel('MyTestModule_intEvents')
    .receiveBroadcastStream()
    .map((event) => jsonDecode(event) as int);
final Stream<bool> boolEvents = const EventChannel('MyTestModule_boolEvents')
    .receiveBroadcastStream()
    .map((event) => jsonDecode(event) as bool);
final Stream<MyDataClass> dataClassEvents = const EventChannel('MyTestModule_dataClassEvents')
    .receiveBroadcastStream()
    .map((event) => MyDataClass.fromJson(jsonDecode(event) as Map<String, dynamic>));
          StreamSubscription<int?> intState(Function(int?) onData) {
    final streamController = StreamController<int?>();
    

    Future<int?> next(int? previous) async {
    return await methodChannelToNative.invokeMethod<int>(
            'MyTestModule_intState',
            [previous]
        );
    }
    
    void startEmittingValues() async {
        int? currentValue;
        while (!streamController.isClosed) {
            try {
                currentValue = await next(currentValue);
                if (!streamController.isClosed) {
                    if (currentValue == null) {
                        streamController.add(null);
                    } else {
                        streamController.add(currentValue);
                    }
                }
            } catch (e) {
                if (!streamController.isClosed) {
                    streamController.addError(e);
                }
            }
        }
    }
    
    streamController.onListen = startEmittingValues;
    
    return streamController.stream.listen(onData);
}
        StreamSubscription<MyDataClass?> dataClassState(Function(MyDataClass?) onData) {
    final streamController = StreamController<MyDataClass?>();
    

    Future<String?> next(String? previous) async {
    return await methodChannelToNative.invokeMethod<String>(
            'MyTestModule_dataClassState',
            [previous]
        );
    }
    
    void startEmittingValues() async {
        String? currentValue;
        while (!streamController.isClosed) {
            try {
                currentValue = await next(currentValue);
                if (!streamController.isClosed) {
                    if (currentValue == null) {
                        streamController.add(null);
                    } else {
                        streamController.add(MyDataClass.fromJson(jsonDecode(currentValue) as Map<String, dynamic>));
                    }
                }
            } catch (e) {
                if (!streamController.isClosed) {
                    streamController.addError(e);
                }
            }
        }
    }
    
    streamController.onListen = startEmittingValues;
    
    return streamController.stream.listen(onData);
}
        StreamSubscription<MyDataClass?> parameterizedDataClassState(MyDataClass data, Function(MyDataClass?) onData) {
    final streamController = StreamController<MyDataClass?>();
    final dataSerialized = jsonEncode(data.toJson());

    Future<String?> next(String? previous) async {
    return await methodChannelToNative.invokeMethod<String>(
            'MyTestModule_parameterizedDataClassState',
            [previous, dataSerialized]
        );
    }
    
    void startEmittingValues() async {
        String? currentValue;
        while (!streamController.isClosed) {
            try {
                currentValue = await next(currentValue);
                if (!streamController.isClosed) {
                    if (currentValue == null) {
                        streamController.add(null);
                    } else {
                        streamController.add(MyDataClass.fromJson(jsonDecode(currentValue) as Map<String, dynamic>));
                    }
                }
            } catch (e) {
                if (!streamController.isClosed) {
                    streamController.addError(e);
                }
            }
        }
    }
    
    streamController.onListen = startEmittingValues;
    
    return streamController.stream.listen(onData);
}
        StreamSubscription<bool?> boolState(Function(bool?) onData) {
    final streamController = StreamController<bool?>();
    

    Future<String?> next(String? previous) async {
    return await methodChannelToNative.invokeMethod<String>(
            'MyTestModule_boolState',
            [previous]
        );
    }
    
    void startEmittingValues() async {
        String? currentValue;
        while (!streamController.isClosed) {
            try {
                currentValue = await next(currentValue);
                if (!streamController.isClosed) {
                    if (currentValue == null) {
                        streamController.add(null);
                    } else {
                        streamController.add(jsonDecode(currentValue) as bool);
                    }
                }
            } catch (e) {
                if (!streamController.isClosed) {
                    streamController.addError(e);
                }
            }
        }
    }
    
    streamController.onListen = startEmittingValues;
    
    return streamController.stream.listen(onData);
}
        StreamSubscription<int?> intStateAdd(int num, Function(int?) onData) {
    final streamController = StreamController<int?>();
    

    Future<int?> next(int? previous) async {
    return await methodChannelToNative.invokeMethod<int>(
            'MyTestModule_intStateAdd',
            [previous, num]
        );
    }
    
    void startEmittingValues() async {
        int? currentValue;
        while (!streamController.isClosed) {
            try {
                currentValue = await next(currentValue);
                if (!streamController.isClosed) {
                    if (currentValue == null) {
                        streamController.add(null);
                    } else {
                        streamController.add(currentValue);
                    }
                }
            } catch (e) {
                if (!streamController.isClosed) {
                    streamController.addError(e);
                }
            }
        }
    }
    
    streamController.onListen = startEmittingValues;
    
    return streamController.stream.listen(onData);
}
  Future<void> unitMethod() async {
    
    await methodChannelToNative.invokeMethod<void>('MyTestModule_unitMethod', []);
}
Future<String> simpleMethod() async {
    
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_simpleMethod',
        [],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method simpleMethod failed');
    }

    final result = invokeResult;

    return result;
}
Future<String> stringMethod(String value) async {
    
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_stringMethod',
        [value],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method stringMethod failed');
    }

    final result = invokeResult;

    return result;
}
Future<String?> nullableStringMethod(String? value) async {
    
    final invokeResult = await methodChannelToNative.invokeMethod<String?>(
        'MyTestModule_nullableStringMethod',
        [value],
    );
    final result = invokeResult;
    return result;
}
Future<int> intMethod(int value) async {
    
    final invokeResult = await methodChannelToNative.invokeMethod<int>(
        'MyTestModule_intMethod',
        [value],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method intMethod failed');
    }

    final result = invokeResult;

    return result;
}
Future<double> doubleMethod(double value) async {
    
    final invokeResult = await methodChannelToNative.invokeMethod<double>(
        'MyTestModule_doubleMethod',
        [value],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method doubleMethod failed');
    }

    final result = invokeResult;

    return result;
}
Future<bool> boolMethod(bool value) async {
    final valueSerialized = value.toString();
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_boolMethod',
        [valueSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method boolMethod failed');
    }

    final result = jsonDecode(invokeResult) as bool;

    return result;
}
Future<String> methodWithSameNameAsInOtherModule(String value) async {
    
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_methodWithSameNameAsInOtherModule',
        [value],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method methodWithSameNameAsInOtherModule failed');
    }

    final result = invokeResult;

    return result;
}
Future<void> parameterizedMethod(String a, int b, bool c, double d) async {
    final cSerialized = c.toString();
    await methodChannelToNative.invokeMethod<void>('MyTestModule_parameterizedMethod', [a, b, cSerialized, d]);
}
Future<DateTime> localDateTimeMethod(DateTime localDateTime) async {
    if (localDateTime.isUtc) throw ArgumentError('localDateTime must not be in UTC');
final localDateTimeSerialized = localDateTime.toIso8601String();
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_localDateTimeMethod',
        [localDateTimeSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method localDateTimeMethod failed');
    }

    final result = DateTime.parse(invokeResult);

    return result;
}
Future<TimeOfDay> localTimeMethod(TimeOfDay localTime) async {
    final localTimeSerialized = "${localTime.hour.toString().padLeft(2, '0')}:${localTime.minute.toString().padLeft(2, '0')}";
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_localTimeMethod',
        [localTimeSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method localTimeMethod failed');
    }

    final result = TimeOfDay.fromDateTime(DateTime.parse("1998-01-01T$invokeResult:00.000"));

    return result;
}
Future<DateTime> localDateMethod(DateTime localDate) async {
    if (localDate.isUtc) throw ArgumentError('localDate must not be in UTC');
final localDateSerialized = localDate.toIso8601String().split('T').first;
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_localDateMethod',
        [localDateSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method localDateMethod failed');
    }

    final result = DateTime.parse(invokeResult);

    return result;
}
Future<Duration> durationMethod(Duration duration) async {
    final durationSerialized = duration.toIso8601String();
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_durationMethod',
        [durationSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method durationMethod failed');
    }

    final result = parseIso8601Duration(invokeResult);

    return result;
}
Future<DateTime> instantMethod(DateTime instant) async {
    if (!instant.isUtc) throw ArgumentError('instant must be in UTC');
final instantSerialized = instant.toIso8601String();
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_instantMethod',
        [instantSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method instantMethod failed');
    }

    final result = DateTime.parse(invokeResult);

    return result;
}
Future<List<String>> stringListMethod(List<String> list) async {
    final listSerialized = jsonEncode(list.map((e) => e).toList());
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_stringListMethod',
        [listSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method stringListMethod failed');
    }

    final result = (jsonDecode(invokeResult) as List<dynamic>).map((element) {
return element as String;
}).toList();

    return result;
}
Future<List<List<String>>> nestedListMethod(List<List<String>> list) async {
    final listSerialized = jsonEncode(list.map((e) => e.map((e) => e).toList()).toList());
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_nestedListMethod',
        [listSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method nestedListMethod failed');
    }

    final result = (jsonDecode(invokeResult) as List<dynamic>).map((element) {
return (element as List<dynamic>).map((element) {
return element as String;
}).toList();
}).toList();

    return result;
}
Future<List<MyDataClass>> dataClassListMethod(List<MyDataClass> list) async {
    final listSerialized = jsonEncode(list.map((e) => e).toList());
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_dataClassListMethod',
        [listSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method dataClassListMethod failed');
    }

    final result = (jsonDecode(invokeResult) as List<dynamic>).map((element) {
return MyDataClass.fromJson(element);
}).toList();

    return result;
}
Future<List<List<MyDataClass>>> nestedDataClassListMethod(List<List<MyDataClass>> list) async {
    final listSerialized = jsonEncode(list.map((e) => e.map((e) => e).toList()).toList());
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_nestedDataClassListMethod',
        [listSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method nestedDataClassListMethod failed');
    }

    final result = (jsonDecode(invokeResult) as List<dynamic>).map((element) {
return (element as List<dynamic>).map((element) {
return MyDataClass.fromJson(element);
}).toList();
}).toList();

    return result;
}
Future<Map<String, int>> mapMethod(Map<String, int> map) async {
    final mapSerialized = jsonEncode(map.map((k, v) => MapEntry(k, v)));
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_mapMethod',
        [mapSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method mapMethod failed');
    }

    final result = (jsonDecode(invokeResult) as Map<String, dynamic>).map((key, value) {
return MapEntry(key, value as int);
});

    return result;
}
Future<MyDataObject> objectMethod(MyDataObject obj) async {
    final objSerialized = jsonEncode(obj.toJson());
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_objectMethod',
        [objSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method objectMethod failed');
    }

    final result = MyDataObject.fromJson(jsonDecode(invokeResult) as Map<String, dynamic>);

    return result;
}
Future<MySealedData> sealedMethod(MySealedData obj) async {
    final objSerialized = jsonEncode(MySealedData.toJson(obj));
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_sealedMethod',
        [objSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method sealedMethod failed');
    }

    final result = MySealedData.fromJson(jsonDecode(invokeResult));

    return result;
}
Future<MyDateClass> dateClassMethod(MyDateClass obj) async {
    final objSerialized = jsonEncode(obj.toJson());
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_dateClassMethod',
        [objSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method dateClassMethod failed');
    }

    final result = MyDateClass.fromJson(jsonDecode(invokeResult) as Map<String, dynamic>);

    return result;
}
Future<MySealedDataWithProps> sealedWithPropsMethod(MySealedDataWithProps obj) async {
    final objSerialized = jsonEncode(MySealedDataWithProps.toJson(obj));
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_sealedWithPropsMethod',
        [objSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method sealedWithPropsMethod failed');
    }

    final result = MySealedDataWithProps.fromJson(jsonDecode(invokeResult));

    return result;
}
Future<MyDataClassWithSealed> classWithSealedPropMethod(MyDataClassWithSealed obj) async {
    final objSerialized = jsonEncode(obj.toJson());
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_classWithSealedPropMethod',
        [objSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method classWithSealedPropMethod failed');
    }

    final result = MyDataClassWithSealed.fromJson(jsonDecode(invokeResult) as Map<String, dynamic>);

    return result;
}
Future<MyEnum> enumMethod(MyEnum entry) async {
    final entrySerialized = jsonEncode(entry.name);;
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_enumMethod',
        [entrySerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method enumMethod failed');
    }

    final result = MyEnum.values.byName(jsonDecode(invokeResult));

    return result;
}
Future<List<MyEnum>> enumListMethod(List<MyEnum> entries) async {
    final entriesSerialized = jsonEncode(entries.map((e) => e.name).toList());
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_enumListMethod',
        [entriesSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method enumListMethod failed');
    }

    final result = (jsonDecode(invokeResult) as List<dynamic>).map((element) {
return MyEnum.values.byName(element);
}).toList();

    return result;
}
Future<Map<String, MyEnum>> enumMapMethod(Map<String, MyEnum> entries) async {
    final entriesSerialized = jsonEncode(entries.map((k, v) => MapEntry(k, v.name)));
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_enumMapMethod',
        [entriesSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method enumMapMethod failed');
    }

    final result = (jsonDecode(invokeResult) as Map<String, dynamic>).map((key, value) {
return MapEntry(key, MyEnum.values.byName(value));
});

    return result;
}
Future<Map<String, List<Map<String, MyDataClass>>>> mixedMethod(Map<String, List<Map<String, MyDataClass>>> map) async {
    final mapSerialized = jsonEncode(map.map((k, v) => MapEntry(k, v.map((e) => e.map((k, v) => MapEntry(k, v))).toList())));
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_mixedMethod',
        [mapSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method mixedMethod failed');
    }

    final result = (jsonDecode(invokeResult) as Map<String, dynamic>).map((key, value) {
return MapEntry(key, (value as List<dynamic>).map((element) {
return (element as Map<String, dynamic>).map((key, value) {
return MapEntry(key, MyDataClass.fromJson(value));
});
}).toList());
});

    return result;
}
Future<MyDataClass> dataClassMethod(MyDataClass data) async {
    final dataSerialized = jsonEncode(data.toJson());
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_dataClassMethod',
        [dataSerialized],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method dataClassMethod failed');
    }

    final result = MyDataClass.fromJson(jsonDecode(invokeResult) as Map<String, dynamic>);

    return result;
}
Future<void> suspendUnitMethod() async {
    
    await methodChannelToNative.invokeMethod<void>('MyTestModule_suspendUnitMethod', []);
}
Future<String> suspendStringMethod() async {
    
    final invokeResult = await methodChannelToNative.invokeMethod<String>(
        'MyTestModule_suspendStringMethod',
        [],
    );

    if (invokeResult == null) {
        throw PlatformException(code: '1', message: 'Method suspendStringMethod failed');
    }

    final result = invokeResult;

    return result;
}
}